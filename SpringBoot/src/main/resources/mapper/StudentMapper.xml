<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yu.mapper.StudentMapper">

    <resultMap id="BaseResultMap" type="com.yu.model.entity.Student">
            <id property="id" column="id" jdbcType="CHAR"/>
            <result property="studentName" column="student_name" jdbcType="VARCHAR"/>
            <result property="gender" column="gender" jdbcType="TINYINT"/>
            <result property="age" column="age" jdbcType="TINYINT"/>
            <result property="phone" column="phone" jdbcType="CHAR"/>
            <result property="dormitoryId" column="dormitory_id" jdbcType="INTEGER"/>
            <result property="deleted" column="deleted" jdbcType="TINYINT"/>
            <result property="classId" column="class_id" jdbcType="INTEGER"/>
    </resultMap>

    <select id="getPage" resultType="com.yu.model.vo.StudentPageVo">
        select s.id,
        s.id,
        student_name,
        gender,
        age,
        phone,
        class_id,
        b.build_name,
        d.dormitory_number
        from tb_student s
        left join tb_dormitory d on s.dormitory_id = d.id
        left join d_building b on d.building_id = b.id
        where s.deleted = 0
        <if test="queryParams.id != null and queryParams.id != ''">
            and s.id = #{queryParams.id}
        </if>

        <if test='queryParams.name != null and queryParams.name.trim() neq ""'>
            and s.student_name like concat('%', #{queryParams.name}, '%')
        </if>
        <if test="queryParams.classId != null and queryParams.classId != ''">
            and s.class_id like #{queryParams.classId}
        </if>
        <if test="queryParams.gender!=null and queryParams.gender != ''">
            and s.gender = #{queryParams.gender}
        </if>

        <if test="queryParams.dormitoryId != null and queryParams.dormitoryId != ''">
            and s.dormitory_id in (#{queryParams.dormitoryId})
        </if>
        order by s.id
    </select>

    <resultMap id="StudentInfoMap" type="com.yu.model.vo.StudentInfoVo">
        <result property="name" column="name" jdbcType="VARCHAR"/>
        <result property="dormitory" column="dormitory_name" jdbcType="VARCHAR" />
        <result property="electricity" column="electricity" jdbcType="DOUBLE"/>
        <result property="water" column="water" jdbcType="DOUBLE"/>
        <collection property="violationLogs" ofType="com.yu.model.entity.ViolationLog" javaType="list">
            <result property="type" column="type" />
            <result property="detail" column="detail"/>
        </collection>
    </resultMap>

    <select id="getStudentInfoAndV" resultMap="StudentInfoMap" parameterType="java.lang.String">
        select s.student_name as name, d.electricity, d.water,
               concat(b.build_name,'--',d.dormitory_number) as dormitory_name, v.type as type,v.detail as detail
        from tb_student s
                 left join tb_dormitory d on s.dormitory_id = d.id
                 left join d_building b on d.building_id = b.id
                 left join violation_log v on s.id = v.student_id
        where s.id = #{id}
    </select>

</mapper>
