{"mybatisFlexConfig":{"accessors":false,"activeRecord":false,"allArgsConstructor":true,"author":"yu","builder":true,"cache":false,"contrPath":"controller","controllerModule":"DormitoryManagementSystem","controllerPackage":"com.yu.controller","controllerSuffix":"Controller","controllerTemplate":"package $config.controllerPackage;\n\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport jakarta.annotation.Resource;\n#if($config.interfacePackage.length() > 0)\nimport ${config.interfacePackage}.${interfaceName};\n#end\n#if($config.modelPackage.length() > 0)\nimport ${config.modelPackage}.${modelName};\n#end\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.io.Serializable;\nimport java.util.List;\n#if($config.qualifiedName)\nimport ${config.qualifiedName};\n#end\n#if($config.swagger)\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport io.swagger.annotations.ApiImplicitParams;\nimport io.swagger.annotations.ApiImplicitParam;\n#end\n#if($config.swagger3)\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport io.swagger.v3.oas.annotations.Parameters;\nimport io.swagger.v3.oas.annotations.tags.Tag;\n#end\n/**\n * $!table.comment 控制层。\n *\n * @author $author\n * @since  $since\n */\n@RestController\n@RequestMapping(\"/$requestPath\")\n#if($config.swagger)\n@Api(tags = \"$!table.comment\")\n#end\n#if($config.swagger3)\n@Tag(name = \"$!{table.comment}控制层\")\n#end\npublic class ${controllerName}{\n\n    @Resource\n    private ${interfaceName} ${interfaceVariable};\n\n/**\n * 添加 $!table.comment\n *\n * @param $requestPath $!table.comment\n * @return {@code true} 添加成功，{@code false} 添加失败\n */\n    @PostMapping(\"/save\")\n    #if($config.swagger)\n    @ApiOperation(value = \"添加$!table.comment\", notes = \"添加$!table.comment\")\n    @ApiImplicitParams(value = {\n        #foreach($column in $table.columnList)\n                @ApiImplicitParam(name = \"$column.fieldName\", value = \"$!column.comment\" #if($column.notNull), required = $column.notNull #end) #if($foreach.hasNext),\n        #end\n        #end\n    })\n    #end\n    #if($config.swagger3)\n    @Operation(summary = \"添加$!table.comment\")\n    @Parameters(value = {\n        #foreach($column in $table.columnList)\n                @Parameter(name = \"$column.fieldName\", description = \"$!column.comment\" #if($column.notNull), required = $column.notNull #end) #if($foreach.hasNext),\n        #end\n        #end\n    })\n    #end\n#if($config.qualifiedName)\n    public ${resutlClass} #if($config.genericity)<Boolean> #end save(@RequestBody $modelName  $requestPath){\n#if($config.resultType=='static')\n        return ${resutlClass}.${config.methodName}(${interfaceVariable}.save($requestPath));\n#else\n        return new ${resutlClass}(${interfaceVariable}.save($requestPath));\n#end\n        }\n#else\n    public boolean save(@RequestBody $modelName  $requestPath){\n        return ${interfaceVariable}.save($requestPath);\n    }\n#end\n\n\n/**\n * 根据主键删除$!table.comment\n *\n * @param id 主键\n * @return {@code true} 删除成功，{@code false} 删除失败\n */\n    @DeleteMapping(\"/remove/{id}\")\n    #if($config.swagger)\n    @ApiOperation(value = \"根据主键删除$!table.comment\", notes = \"根据主键删除$!table.comment\")\n    @ApiImplicitParams(value = {\n        #foreach($column in $table.columnList)\n            #if($column.primaryKey)\n                    @ApiImplicitParam(name = \"$column.fieldName\", value = \"$!column.comment\", required = true)\n            #end\n        #end\n    })\n    #end\n    #if($config.swagger3)\n    @Operation(summary = \"根据主键删除$!table.comment\")\n    @Parameters(value = {\n        #foreach($column in $table.columnList)\n            #if($column.primaryKey)\n                    @Parameter(name = \"$column.fieldName\", description = \"$!column.comment\", required = true)\n            #end\n        #end\n    })\n    #end\n#if($config.qualifiedName)\n    public ${resutlClass} #if($config.genericity)<Boolean> #end  remove(@PathVariable Serializable id){\n    #if($config.resultType=='static')\n            return ${resutlClass}.${config.methodName}(${interfaceVariable}.removeById(id));\n    #else\n            return new ${resutlClass}(${interfaceVariable}.removeById(id));\n    #end\n    }\n#else\n    public boolean remove(@PathVariable Serializable id){\n        return ${interfaceVariable}.removeById(id);\n    }\n#end\n\n\n/**\n * 根据主键更新$!table.comment\n *\n * @param $requestPath $!table.comment\n * @return {@code true} 更新成功，{@code false} 更新失败\n */\n    @PutMapping(\"/update\")\n    #if($config.swagger)\n    @ApiOperation(value = \"根据主键更新$!table.comment\", notes = \"根据主键更新$!table.comment\")\n    @ApiImplicitParams(value = {\n        #foreach($column in $table.columnList)\n                @ApiImplicitParam(name = \"$column.fieldName\", value = \"$!column.comment\" #if($column.primaryKey), required = true #end) #if($foreach.hasNext),\n        #end\n        #end\n    })\n    #end\n    #if($config.swagger3)\n    @Operation(summary = \"根据主键更新$!table.comment\")\n    @Parameters(value = {\n        #foreach($column in $table.columnList)\n                @Parameter(name = \"$column.fieldName\", description = \"$!column.comment\" #if($column.primaryKey), required = true #end) #if($foreach.hasNext),\n        #end\n        #end\n    })\n    #end\n#if($config.qualifiedName)\n    public  ${resutlClass} #if($config.genericity)<Boolean> #end  update(@RequestBody $modelName $requestPath ){\n    #if($config.resultType=='static')\n            return ${resutlClass}.${config.methodName}(${interfaceVariable}.updateById($requestPath));\n    #else\n            return new ${resutlClass}(${interfaceVariable}.updateById($requestPath));\n    #end\n    }\n#else\n    public boolean update(@RequestBody $modelName $requestPath ){\n        return ${interfaceVariable}.updateById($requestPath);\n    }\n#end\n\n\n/**\n * 查询所有$!table.comment\n *\n * @return 所有数据\n */\n    @GetMapping(\"/list\")\n    #if($config.swagger)\n    @ApiOperation(value = \"查询所有$!table.comment\", notes = \"查询所有$!table.comment\")\n    #end\n    #if($config.swagger3)\n    @Operation(summary = \"查询所有$!table.comment\")\n    #end\n#if($config.qualifiedName)\n    public ${resutlClass}#if($config.genericity)<List<$modelName>> #end list(){\n    #if($config.resultType=='static')\n            return ${resutlClass}.${config.methodName}(${interfaceVariable}.list());\n    #else\n            return new ${resutlClass}(${interfaceVariable}.list());\n    #end\n    }\n#else\n    public List<$modelName> list(){\n        return ${interfaceVariable}.list();\n    }\n#end\n\n\n/**\n * 根据$!{table.comment}主键获取详细信息。\n *\n * @param id ${requestPath}主键\n * @return $!{table.comment}详情\n */\n    @GetMapping(\"/getInfo/{id}\")\n    #if($config.swagger)\n    @ApiOperation(value = \"根据$!{table.comment}主键获取详细信息\", notes = \"根据$!{table.comment}主键获取详细信息\")\n    @ApiImplicitParams(value = {\n        #foreach($column in $table.columnList)\n            #if($column.primaryKey)\n                    @ApiImplicitParam(name = \"$column.fieldName\", value = \"$!column.comment\", required = true)\n            #end\n        #end\n    })\n    #end\n    #if($config.swagger3)\n    @Operation(summary = \"根据$!{table.comment}主键获取详细信息\")\n    @Parameters(value = {\n        #foreach($column in $table.columnList)\n            #if($column.primaryKey)\n                    @Parameter(name = \"$column.fieldName\", description = \"$!column.comment\", required = true)\n            #end\n        #end\n    })\n    #end\n#if($config.qualifiedName)\n    public ${resutlClass}#if($config.genericity)<$modelName> #end  getInfo(@PathVariable Serializable id){\n    #if($config.resultType=='static')\n            return ${resutlClass}.${config.methodName}(${interfaceVariable}.getById(id));\n    #else\n            return new ${resutlClass}(${interfaceVariable}.getById(id));\n    #end\n    }\n#else\n    public $modelName getInfo(@PathVariable Serializable id){\n        return ${interfaceVariable}.getById(id);\n    }\n#end\n\n\n/**\n * 分页查询$!{table.comment}\n *\n * @param page 分页对象\n * @return 分页对象\n */\n    @GetMapping(\"/page\")\n    #if($config.swagger)\n    @ApiOperation(value = \"分页查询$!{table.comment}\", notes = \"分页查询$!{table.comment}\")\n    @ApiImplicitParams(value = {\n            @ApiImplicitParam(name = \"pageNumber\", value = \"页码\", required = true),\n            @ApiImplicitParam(name = \"pageSize\", value = \"每页大小\", required = true)\n    })\n    #end\n    #if($config.swagger3)\n    @Operation(summary = \"分页查询$!table.comment\")\n    @Parameters(value = {\n            @Parameter(name = \"pageNumber\", description = \"页码\", required = true),\n            @Parameter(name = \"pageSize\", description = \"每页大小\", required = true)\n    })\n    #end\n#if($config.qualifiedName)\n    public ${resutlClass}#if($config.genericity)<Page<$modelName>> #end page(Page<$modelName> page){\n    #if($config.resultType=='static')\n            return ${resutlClass}.${config.methodName}(${interfaceVariable}.page(page));\n    #else\n            return new ${resutlClass}(${interfaceVariable}.page(page));\n    #end\n    }\n#else\n    public Page<$modelName> page(Page<$modelName> page){\n        return ${interfaceVariable}.page(page);\n    }\n#end\n}","data":true,"domainPath":"domain","genericity":true,"idType":"Auto","implModule":"DormitoryManagementSystem","implPackage":"com.yu.service.impl","implPath":"impl","implSuffix":"ServiceImpl","implTemplate":"\npackage $config.implPackage;\n\n\nimport org.springframework.stereotype.Service;\n#if($config.interfacePackage.length() > 0)\nimport ${config.interfacePackage}.${interfaceName};\n#end\n#if($config.modelPackage.length() > 0)\nimport ${config.modelPackage}.${modelName};\n#end\n#if($config.mapperPackage.length() > 0)\nimport $config.mapperPackage.${mapperName};\n#end\n#if($config.cache)\nimport com.mybatisflex.core.paginate.Page;\nimport com.mybatisflex.core.query.QueryWrapper;\nimport org.springframework.cache.annotation.Cacheable;\nimport org.springframework.cache.annotation.CacheConfig;\nimport org.springframework.cache.annotation.CacheEvict;\nimport java.io.Serializable;\nimport java.util.Collection;\nimport java.util.List;\n#end\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\n/**\n * $!table.comment 服务层实现。\n *\n * @author $author\n * @since $since\n */\n@Service\npublic class ${implName} extends ServiceImpl<${mapperName},${modelName}> implements ${interfaceName} {\n\n#if($config.cache)\n\t@Override\n\t@CacheEvict(allEntries = true)\n\tpublic boolean remove(QueryWrapper query) {\n\t\treturn super.remove(query);\n\t}\n\n\t@Override\n\t@CacheEvict(key = \"#id\")\n\tpublic boolean removeById(Serializable id) {\n\t\treturn super.removeById(id);\n\t}\n\n\t@Override\n\t@CacheEvict(allEntries = true)\n\tpublic boolean removeByIds(Collection<? extends Serializable> ids) {\n\t\treturn super.removeByIds(ids);\n\t}\n\n\t@Override\n\t@CacheEvict(allEntries = true)\n\tpublic boolean update($modelName entity, QueryWrapper query) {\n\t\treturn super.update(entity, query);\n\t}\n\n\t@Override\n\t@CacheEvict(key = \"#entity.#(primaryKey)\")\n\tpublic boolean updateById($modelName entity, boolean ignoreNulls) {\n\t\treturn super.updateById(entity, ignoreNulls);\n\t}\n\n\t@Override\n\t@CacheEvict(allEntries = true)\n\tpublic boolean updateBatch(Collection<$modelName> entities, int batchSize) {\n\t\treturn super.updateBatch(entities, batchSize);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#id\")\n\tpublic $modelName getById(Serializable id) {\n\t\treturn super.getById(id);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#root.methodName + ':' + #query.toSQL()\")\n\tpublic $modelName getOne(QueryWrapper query) {\n\t\treturn super.getOne(query);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#root.methodName + ':' + #query.toSQL()\")\n\tpublic <R> R getOneAs(QueryWrapper query, Class<R> asType) {\n\t\treturn super.getOneAs(query, asType);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#root.methodName + ':' + #query.toSQL()\")\n\tpublic List<$modelName> list(QueryWrapper query) {\n\t\treturn super.list(query);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#root.methodName + ':' + #query.toSQL()\")\n\tpublic <R> List<R> listAs(QueryWrapper query, Class<R> asType) {\n\t\treturn super.listAs(query, asType);\n\t}\n\n\t/**\n\t * @deprecated 无法通过注解进行缓存操作。\n\t */\n\t@Override\n\t@Deprecated\n\tpublic List<$modelName> listByIds(Collection<? extends Serializable> ids) {\n\t\treturn super.listByIds(ids);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#root.methodName + ':' + #query.toSQL()\")\n\tpublic long count(QueryWrapper query) {\n\t\treturn super.count(query);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#root.methodName + ':' + #page.getPageSize() + ':' + #page.getPageNumber() + ':' + #query.toSQL()\")\n\tpublic <R> Page<R> pageAs(Page<R> page, QueryWrapper query, Class<R> asType) {\n\t\treturn super.pageAs(page, query, asType);\n\t}\n#end\n}","interfaceModule":"DormitoryManagementSystem","interfacePackage":"com.yu.service","interfaceSuffix":"Service","interfaceTempalate":"package $interfacePackage;\n\n\n#if($config.modelPackage.length() > 0)\nimport ${config.modelPackage}.${modelName};\n#end\nimport com.baomidou.mybatisplus.extension.service.IService;\n\n/**\n * $!table.comment 服务层。\n *\n * @author $author\n * @since $since\n */\npublic interface ${interfaceName} extends IService<${modelName}>{\n\n}","logicDeleteField":"deleted","mapperModule":"DormitoryManagementSystem","mapperPackage":"com.yu.mapper","mapperPath":"mapper","mapperSuffix":"Mapper","mapperTemplate":"package $config.mapperPackage;\n\n#if($config.modelPackage.length() > 0)\nimport ${config.modelPackage}.${modelName};\n#end\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport org.apache.ibatis.annotations.Mapper;\n\n/**\n * $!table.comment 映射层。\n *\n * @author $author\n * @since $since\n */\n@Mapper\npublic interface ${mapperName} extends BaseMapper<${modelName}> {\n\n\n}\n","methodName":"success(T data)","modelModule":"DormitoryManagementSystem","modelPackage":"com.yu.model.entity","modelSuffix":"Entity","modelSuperClass":"","modelTemplate":"package $config.modelPackage;\n\n#if($config.data||$config.activeRecord)\nimport lombok.Data;\n#end\n#if($config.allArgsConstructor)\nimport lombok.AllArgsConstructor;\n#end\n#if($config.noArgsConstructor)\nimport lombok.NoArgsConstructor;\n#end\n#if($config.requiredArgsConstructor)\nimport lombok.RequiredArgsConstructor;\n#end\n#if($config.builder)\nimport lombok.Builder;\n#end\n#if($config.accessors)\nimport lombok.experimental.Accessors;\n#end\n#if($config.swagger)\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n#end\n#if($config.swagger3)\nimport io.swagger.v3.oas.annotations.media.Schema;\n#end\n#if($config.activeRecord)\nimport com.mybatisflex.core.activerecord.Model;\n#end\nimport com.baomidou.mybatisplus.annotation.TableField;\n#foreach($column in $table.columnList)\n#if($column.primaryKey)\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.IdType;\n#end\n#end\nimport com.baomidou.mybatisplus.annotation.TableName;\n#foreach($classImport in $importClassList)\nimport $classImport;\n#end\n\n/**\n * $!table.comment 实体类。\n *\n * @author $author\n * @since $since\n */\n#if($config.accessors)\n@Accessors(chain = true)\n#end\n#if($config.requiredArgsConstructor)\n@RequiredArgsConstructor\n#end\n#if($config.data||$config.activeRecord)\n@Data#if($config.activeRecord)(staticConstructor = \"create\") #end\n#end\n#if($config.builder)\n@Builder\n#end\n#if($config.noArgsConstructor)\n@NoArgsConstructor\n#end\n#if($config.allArgsConstructor)\n@AllArgsConstructor\n#end\n#if($config.swagger)\n@ApiModel(value = \"$!table.comment\", description = \"$!table.comment\")\n#end\n#if($config.swagger3)\n@Schema(name = \"$table.comment\")\n#end\n@TableName(value = \"$table.name\"#if($config.dataSource) , dataSource = \"${config.dataSource}\" #end#if($table.onInsert) , onInsert = ${table.onInsert}.class #end#if($table.onUpdate) , onUpdate = ${table.onUpdate}.class #end#if($table.onSet) , onSet = ${table.onSet}.class #end)\npublic class ${modelName} #if($config.activeRecord) extends Model<${modelName}>  #end #if(${config.modelSuperClass}) extends ${table.superClass}  #end {\n\n    #foreach($column in $table.columnList)\n    #if($column.comment.length()>0)\n    /**\n    * $!column.comment\n    */\n    #end\n    #if($config.swagger && $column.comment)\n    @ApiModelProperty(value = \"$column.comment\")\n    #end\n    #if($config.swagger3 && $column.comment)\n    @Schema(description = \"$column.comment\")\n    #end\n    #if($column.primaryKey)\n    @TableId(type = IdType.AUTO)\n    #else\n    @TableField(value = \"$column.name\" #if($column.logicDelete), isLogicDelete = true #end #if($column.tenant), tenantId = true #end #if($column.version), version = true #end #if($column.insertValue), onInsertValue = \"$column.insertValue\" #end#if($column.updateValue), onUpdateValue = \"$column.updateValue\" #end)\n    #end\n    private $column.fieldType  $column.fieldName;\n\n#end\n\n#if($config.data==false&& $config.activeRecord==false)\n    #foreach($column in $table.columnList)\n    public  $column.fieldType  get${column.methodName}() {\n        return ${column.fieldName};\n    }\n\n    public void set${column.methodName}(${column.fieldType} ${column.fieldName}) {\n        this.${column.fieldName} = ${column.fieldName};\n    }\n#end\n#end\n        }\n","modules":{"":"DormitoryManagementSystem","Entity":"DormitoryManagementSystem","Mapper":"DormitoryManagementSystem","ServiceImpl":"DormitoryManagementSystem","Service":"DormitoryManagementSystem","Controller":"DormitoryManagementSystem"},"noArgsConstructor":true,"onInsert":"","onUpdate":"","overrideCheckBox":true,"packages":{"":"mapper","Entity":"com.yu.model.entity","Mapper":"com.yu.mapper","ServiceImpl":"com.yu.service.impl","Service":"com.yu.service","Controller":"com.yu.controller"},"qualifiedName":"com.yu.common.result.Result","requiredArgsConstructor":false,"resultType":"static","servicePath":"service","since":"1.0","suffix":{"":"Mapper","Entity":"Entity","Mapper":"Mapper","ServiceImpl":"ServiceImpl","Service":"Service","Controller":"Controller"},"swagger":false,"swagger3":true,"sync":false,"tablePrefix":"","templates":{"":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"${config.mapperPackage}.${mapperName}\">\n#if($config.modelPackage.length() > 0)\n    <resultMap id=\"BaseResultMap\" type=\"${config.modelPackage}.${modelName}\">\n#set($result = \"\")\n#foreach($column in $table.columnList)\n#set($result = $result + \"`\"+ ${column.name}+ \"`\")\n#if($foreach.hasNext())\n#set($result = $result + \", \")\n#end\n#if($column.primaryKey)\n        <id column=\"${column.name}\" jdbcType=\"$column.type\" property=\"${column.fieldName}\"/>\n#else\n        <result column=\"${column.name}\" jdbcType=\"$column.type\" property=\"${column.fieldName}\"/>\n#end\n#end\n    </resultMap>\n#end\n    <sql id=\"Base_Column_List\">\n        $result\n    </sql>\n\n</mapper>","Entity":"package $config.modelPackage;\n\n#if($config.data||$config.activeRecord)\nimport lombok.Data;\n#end\n#if($config.allArgsConstructor)\nimport lombok.AllArgsConstructor;\n#end\n#if($config.noArgsConstructor)\nimport lombok.NoArgsConstructor;\n#end\n#if($config.requiredArgsConstructor)\nimport lombok.RequiredArgsConstructor;\n#end\n#if($config.builder)\nimport lombok.Builder;\n#end\n#if($config.accessors)\nimport lombok.experimental.Accessors;\n#end\n#if($config.swagger)\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n#end\n#if($config.swagger3)\nimport io.swagger.v3.oas.annotations.media.Schema;\n#end\n#if($config.activeRecord)\nimport com.mybatisflex.core.activerecord.Model;\n#end\nimport com.baomidou.mybatisplus.annotation.TableField;\n#foreach($column in $table.columnList)\n#if($column.primaryKey)\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.IdType;\n#end\n#end\nimport com.baomidou.mybatisplus.annotation.TableName;\n#foreach($classImport in $importClassList)\nimport $classImport;\n#end\n\n/**\n * $!table.comment 实体类。\n *\n * @author $author\n * @since $since\n */\n#if($config.accessors)\n@Accessors(chain = true)\n#end\n#if($config.requiredArgsConstructor)\n@RequiredArgsConstructor\n#end\n#if($config.data||$config.activeRecord)\n@Data#if($config.activeRecord)(staticConstructor = \"create\") #end\n#end\n#if($config.builder)\n@Builder\n#end\n#if($config.noArgsConstructor)\n@NoArgsConstructor\n#end\n#if($config.allArgsConstructor)\n@AllArgsConstructor\n#end\n#if($config.swagger)\n@ApiModel(value = \"$!table.comment\", description = \"$!table.comment\")\n#end\n#if($config.swagger3)\n@Schema(name = \"$table.comment\")\n#end\n@TableName(value = \"$table.name\"#if($config.dataSource) , dataSource = \"${config.dataSource}\" #end#if($table.onInsert) , onInsert = ${table.onInsert}.class #end#if($table.onUpdate) , onUpdate = ${table.onUpdate}.class #end#if($table.onSet) , onSet = ${table.onSet}.class #end)\npublic class ${modelName} #if($config.activeRecord) extends Model<${modelName}>  #end #if(${config.modelSuperClass}) extends ${table.superClass}  #end {\n\n    #foreach($column in $table.columnList)\n    #if($column.comment.length()>0)\n    /**\n    * $!column.comment\n    */\n    #end\n    #if($config.swagger && $column.comment)\n    @ApiModelProperty(value = \"$column.comment\")\n    #end\n    #if($config.swagger3 && $column.comment)\n    @Schema(description = \"$column.comment\")\n    #end\n    #if($column.primaryKey)\n    @TableId(type = IdType.AUTO)\n    #else\n    @TableField(value = \"$column.name\" #if($column.logicDelete), isLogicDelete = true #end #if($column.tenant), tenantId = true #end #if($column.version), version = true #end #if($column.insertValue), onInsertValue = \"$column.insertValue\" #end#if($column.updateValue), onUpdateValue = \"$column.updateValue\" #end)\n    #end\n    private $column.fieldType  $column.fieldName;\n\n#end\n\n#if($config.data==false&& $config.activeRecord==false)\n    #foreach($column in $table.columnList)\n    public  $column.fieldType  get${column.methodName}() {\n        return ${column.fieldName};\n    }\n\n    public void set${column.methodName}(${column.fieldType} ${column.fieldName}) {\n        this.${column.fieldName} = ${column.fieldName};\n    }\n#end\n#end\n        }\n","Mapper":"package $config.mapperPackage;\n\n#if($config.modelPackage.length() > 0)\nimport ${config.modelPackage}.${modelName};\n#end\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport org.apache.ibatis.annotations.Mapper;\n\n/**\n * $!table.comment 映射层。\n *\n * @author $author\n * @since $since\n */\n@Mapper\npublic interface ${mapperName} extends BaseMapper<${modelName}> {\n\n\n}\n","ServiceImpl":"\npackage $config.implPackage;\n\n\nimport org.springframework.stereotype.Service;\n#if($config.interfacePackage.length() > 0)\nimport ${config.interfacePackage}.${interfaceName};\n#end\n#if($config.modelPackage.length() > 0)\nimport ${config.modelPackage}.${modelName};\n#end\n#if($config.mapperPackage.length() > 0)\nimport $config.mapperPackage.${mapperName};\n#end\n#if($config.cache)\nimport com.mybatisflex.core.paginate.Page;\nimport com.mybatisflex.core.query.QueryWrapper;\nimport org.springframework.cache.annotation.Cacheable;\nimport org.springframework.cache.annotation.CacheConfig;\nimport org.springframework.cache.annotation.CacheEvict;\nimport java.io.Serializable;\nimport java.util.Collection;\nimport java.util.List;\n#end\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\n/**\n * $!table.comment 服务层实现。\n *\n * @author $author\n * @since $since\n */\n@Service\npublic class ${implName} extends ServiceImpl<${mapperName},${modelName}> implements ${interfaceName} {\n\n#if($config.cache)\n\t@Override\n\t@CacheEvict(allEntries = true)\n\tpublic boolean remove(QueryWrapper query) {\n\t\treturn super.remove(query);\n\t}\n\n\t@Override\n\t@CacheEvict(key = \"#id\")\n\tpublic boolean removeById(Serializable id) {\n\t\treturn super.removeById(id);\n\t}\n\n\t@Override\n\t@CacheEvict(allEntries = true)\n\tpublic boolean removeByIds(Collection<? extends Serializable> ids) {\n\t\treturn super.removeByIds(ids);\n\t}\n\n\t@Override\n\t@CacheEvict(allEntries = true)\n\tpublic boolean update($modelName entity, QueryWrapper query) {\n\t\treturn super.update(entity, query);\n\t}\n\n\t@Override\n\t@CacheEvict(key = \"#entity.#(primaryKey)\")\n\tpublic boolean updateById($modelName entity, boolean ignoreNulls) {\n\t\treturn super.updateById(entity, ignoreNulls);\n\t}\n\n\t@Override\n\t@CacheEvict(allEntries = true)\n\tpublic boolean updateBatch(Collection<$modelName> entities, int batchSize) {\n\t\treturn super.updateBatch(entities, batchSize);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#id\")\n\tpublic $modelName getById(Serializable id) {\n\t\treturn super.getById(id);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#root.methodName + ':' + #query.toSQL()\")\n\tpublic $modelName getOne(QueryWrapper query) {\n\t\treturn super.getOne(query);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#root.methodName + ':' + #query.toSQL()\")\n\tpublic <R> R getOneAs(QueryWrapper query, Class<R> asType) {\n\t\treturn super.getOneAs(query, asType);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#root.methodName + ':' + #query.toSQL()\")\n\tpublic List<$modelName> list(QueryWrapper query) {\n\t\treturn super.list(query);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#root.methodName + ':' + #query.toSQL()\")\n\tpublic <R> List<R> listAs(QueryWrapper query, Class<R> asType) {\n\t\treturn super.listAs(query, asType);\n\t}\n\n\t/**\n\t * @deprecated 无法通过注解进行缓存操作。\n\t */\n\t@Override\n\t@Deprecated\n\tpublic List<$modelName> listByIds(Collection<? extends Serializable> ids) {\n\t\treturn super.listByIds(ids);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#root.methodName + ':' + #query.toSQL()\")\n\tpublic long count(QueryWrapper query) {\n\t\treturn super.count(query);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#root.methodName + ':' + #page.getPageSize() + ':' + #page.getPageNumber() + ':' + #query.toSQL()\")\n\tpublic <R> Page<R> pageAs(Page<R> page, QueryWrapper query, Class<R> asType) {\n\t\treturn super.pageAs(page, query, asType);\n\t}\n#end\n}","Service":"package $interfacePackage;\n\n\n#if($config.modelPackage.length() > 0)\nimport ${config.modelPackage}.${modelName};\n#end\nimport com.baomidou.mybatisplus.extension.service.IService;\n\n/**\n * $!table.comment 服务层。\n *\n * @author $author\n * @since $since\n */\npublic interface ${interfaceName} extends IService<${modelName}>{\n\n}","Controller":"package $config.controllerPackage;\n\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport jakarta.annotation.Resource;\n#if($config.interfacePackage.length() > 0)\nimport ${config.interfacePackage}.${interfaceName};\n#end\n#if($config.modelPackage.length() > 0)\nimport ${config.modelPackage}.${modelName};\n#end\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.io.Serializable;\nimport java.util.List;\n#if($config.qualifiedName)\nimport ${config.qualifiedName};\n#end\n#if($config.swagger)\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport io.swagger.annotations.ApiImplicitParams;\nimport io.swagger.annotations.ApiImplicitParam;\n#end\n#if($config.swagger3)\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport io.swagger.v3.oas.annotations.Parameters;\nimport io.swagger.v3.oas.annotations.tags.Tag;\n#end\n/**\n * $!table.comment 控制层。\n *\n * @author $author\n * @since  $since\n */\n@RestController\n@RequestMapping(\"/$requestPath\")\n#if($config.swagger)\n@Api(tags = \"$!table.comment\")\n#end\n#if($config.swagger3)\n@Tag(name = \"$!{table.comment}控制层\")\n#end\npublic class ${controllerName}{\n\n    @Resource\n    private ${interfaceName} ${interfaceVariable};\n\n/**\n * 添加 $!table.comment\n *\n * @param $requestPath $!table.comment\n * @return {@code true} 添加成功，{@code false} 添加失败\n */\n    @PostMapping(\"/save\")\n    #if($config.swagger)\n    @ApiOperation(value = \"添加$!table.comment\", notes = \"添加$!table.comment\")\n    @ApiImplicitParams(value = {\n        #foreach($column in $table.columnList)\n                @ApiImplicitParam(name = \"$column.fieldName\", value = \"$!column.comment\" #if($column.notNull), required = $column.notNull #end) #if($foreach.hasNext),\n        #end\n        #end\n    })\n    #end\n    #if($config.swagger3)\n    @Operation(summary = \"添加$!table.comment\")\n    @Parameters(value = {\n        #foreach($column in $table.columnList)\n                @Parameter(name = \"$column.fieldName\", description = \"$!column.comment\" #if($column.notNull), required = $column.notNull #end) #if($foreach.hasNext),\n        #end\n        #end\n    })\n    #end\n#if($config.qualifiedName)\n    public ${resutlClass} #if($config.genericity)<Boolean> #end save(@RequestBody $modelName  $requestPath){\n#if($config.resultType=='static')\n        return ${resutlClass}.${config.methodName}(${interfaceVariable}.save($requestPath));\n#else\n        return new ${resutlClass}(${interfaceVariable}.save($requestPath));\n#end\n        }\n#else\n    public boolean save(@RequestBody $modelName  $requestPath){\n        return ${interfaceVariable}.save($requestPath);\n    }\n#end\n\n\n/**\n * 根据主键删除$!table.comment\n *\n * @param id 主键\n * @return {@code true} 删除成功，{@code false} 删除失败\n */\n    @DeleteMapping(\"/remove/{id}\")\n    #if($config.swagger)\n    @ApiOperation(value = \"根据主键删除$!table.comment\", notes = \"根据主键删除$!table.comment\")\n    @ApiImplicitParams(value = {\n        #foreach($column in $table.columnList)\n            #if($column.primaryKey)\n                    @ApiImplicitParam(name = \"$column.fieldName\", value = \"$!column.comment\", required = true)\n            #end\n        #end\n    })\n    #end\n    #if($config.swagger3)\n    @Operation(summary = \"根据主键删除$!table.comment\")\n    @Parameters(value = {\n        #foreach($column in $table.columnList)\n            #if($column.primaryKey)\n                    @Parameter(name = \"$column.fieldName\", description = \"$!column.comment\", required = true)\n            #end\n        #end\n    })\n    #end\n#if($config.qualifiedName)\n    public ${resutlClass} #if($config.genericity)<Boolean> #end  remove(@PathVariable Serializable id){\n    #if($config.resultType=='static')\n            return ${resutlClass}.${config.methodName}(${interfaceVariable}.removeById(id));\n    #else\n            return new ${resutlClass}(${interfaceVariable}.removeById(id));\n    #end\n    }\n#else\n    public boolean remove(@PathVariable Serializable id){\n        return ${interfaceVariable}.removeById(id);\n    }\n#end\n\n\n/**\n * 根据主键更新$!table.comment\n *\n * @param $requestPath $!table.comment\n * @return {@code true} 更新成功，{@code false} 更新失败\n */\n    @PutMapping(\"/update\")\n    #if($config.swagger)\n    @ApiOperation(value = \"根据主键更新$!table.comment\", notes = \"根据主键更新$!table.comment\")\n    @ApiImplicitParams(value = {\n        #foreach($column in $table.columnList)\n                @ApiImplicitParam(name = \"$column.fieldName\", value = \"$!column.comment\" #if($column.primaryKey), required = true #end) #if($foreach.hasNext),\n        #end\n        #end\n    })\n    #end\n    #if($config.swagger3)\n    @Operation(summary = \"根据主键更新$!table.comment\")\n    @Parameters(value = {\n        #foreach($column in $table.columnList)\n                @Parameter(name = \"$column.fieldName\", description = \"$!column.comment\" #if($column.primaryKey), required = true #end) #if($foreach.hasNext),\n        #end\n        #end\n    })\n    #end\n#if($config.qualifiedName)\n    public  ${resutlClass} #if($config.genericity)<Boolean> #end  update(@RequestBody $modelName $requestPath ){\n    #if($config.resultType=='static')\n            return ${resutlClass}.${config.methodName}(${interfaceVariable}.updateById($requestPath));\n    #else\n            return new ${resutlClass}(${interfaceVariable}.updateById($requestPath));\n    #end\n    }\n#else\n    public boolean update(@RequestBody $modelName $requestPath ){\n        return ${interfaceVariable}.updateById($requestPath);\n    }\n#end\n\n\n/**\n * 查询所有$!table.comment\n *\n * @return 所有数据\n */\n    @GetMapping(\"/list\")\n    #if($config.swagger)\n    @ApiOperation(value = \"查询所有$!table.comment\", notes = \"查询所有$!table.comment\")\n    #end\n    #if($config.swagger3)\n    @Operation(summary = \"查询所有$!table.comment\")\n    #end\n#if($config.qualifiedName)\n    public ${resutlClass}#if($config.genericity)<List<$modelName>> #end list(){\n    #if($config.resultType=='static')\n            return ${resutlClass}.${config.methodName}(${interfaceVariable}.list());\n    #else\n            return new ${resutlClass}(${interfaceVariable}.list());\n    #end\n    }\n#else\n    public List<$modelName> list(){\n        return ${interfaceVariable}.list();\n    }\n#end\n\n\n/**\n * 根据$!{table.comment}主键获取详细信息。\n *\n * @param id ${requestPath}主键\n * @return $!{table.comment}详情\n */\n    @GetMapping(\"/getInfo/{id}\")\n    #if($config.swagger)\n    @ApiOperation(value = \"根据$!{table.comment}主键获取详细信息\", notes = \"根据$!{table.comment}主键获取详细信息\")\n    @ApiImplicitParams(value = {\n        #foreach($column in $table.columnList)\n            #if($column.primaryKey)\n                    @ApiImplicitParam(name = \"$column.fieldName\", value = \"$!column.comment\", required = true)\n            #end\n        #end\n    })\n    #end\n    #if($config.swagger3)\n    @Operation(summary = \"根据$!{table.comment}主键获取详细信息\")\n    @Parameters(value = {\n        #foreach($column in $table.columnList)\n            #if($column.primaryKey)\n                    @Parameter(name = \"$column.fieldName\", description = \"$!column.comment\", required = true)\n            #end\n        #end\n    })\n    #end\n#if($config.qualifiedName)\n    public ${resutlClass}#if($config.genericity)<$modelName> #end  getInfo(@PathVariable Serializable id){\n    #if($config.resultType=='static')\n            return ${resutlClass}.${config.methodName}(${interfaceVariable}.getById(id));\n    #else\n            return new ${resutlClass}(${interfaceVariable}.getById(id));\n    #end\n    }\n#else\n    public $modelName getInfo(@PathVariable Serializable id){\n        return ${interfaceVariable}.getById(id);\n    }\n#end\n\n\n/**\n * 分页查询$!{table.comment}\n *\n * @param page 分页对象\n * @return 分页对象\n */\n    @GetMapping(\"/page\")\n    #if($config.swagger)\n    @ApiOperation(value = \"分页查询$!{table.comment}\", notes = \"分页查询$!{table.comment}\")\n    @ApiImplicitParams(value = {\n            @ApiImplicitParam(name = \"pageNumber\", value = \"页码\", required = true),\n            @ApiImplicitParam(name = \"pageSize\", value = \"每页大小\", required = true)\n    })\n    #end\n    #if($config.swagger3)\n    @Operation(summary = \"分页查询$!table.comment\")\n    @Parameters(value = {\n            @Parameter(name = \"pageNumber\", description = \"页码\", required = true),\n            @Parameter(name = \"pageSize\", description = \"每页大小\", required = true)\n    })\n    #end\n#if($config.qualifiedName)\n    public ${resutlClass}#if($config.genericity)<Page<$modelName>> #end page(Page<$modelName> page){\n    #if($config.resultType=='static')\n            return ${resutlClass}.${config.methodName}(${interfaceVariable}.page(page));\n    #else\n            return new ${resutlClass}(${interfaceVariable}.page(page));\n    #end\n    }\n#else\n    public Page<$modelName> page(Page<$modelName> page){\n        return ${interfaceVariable}.page(page);\n    }\n#end\n}"},"xmlModule":"DormitoryManagementSystem","xmlPackage":"mapper","xmlPath":"mappers","xmlTemplate":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"${config.mapperPackage}.${mapperName}\">\n#if($config.modelPackage.length() > 0)\n    <resultMap id=\"BaseResultMap\" type=\"${config.modelPackage}.${modelName}\">\n#set($result = \"\")\n#foreach($column in $table.columnList)\n#set($result = $result + \"`\"+ ${column.name}+ \"`\")\n#if($foreach.hasNext())\n#set($result = $result + \", \")\n#end\n#if($column.primaryKey)\n        <id column=\"${column.name}\" jdbcType=\"$column.type\" property=\"${column.fieldName}\"/>\n#else\n        <result column=\"${column.name}\" jdbcType=\"$column.type\" property=\"${column.fieldName}\"/>\n#end\n#end\n    </resultMap>\n#end\n    <sql id=\"Base_Column_List\">\n        $result\n    </sql>\n\n</mapper>"},"configSince":{"yu":{"accessors":false,"activeRecord":false,"allArgsConstructor":true,"author":"yu","builder":true,"cache":false,"contrPath":"controller","controllerModule":"DormitoryManagementSystem","controllerPackage":"com.yu.controller","controllerSuffix":"Controller","controllerTemplate":"package $config.controllerPackage;\n\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport jakarta.annotation.Resource;\n#if($config.interfacePackage.length() > 0)\nimport ${config.interfacePackage}.${interfaceName};\n#end\n#if($config.modelPackage.length() > 0)\nimport ${config.modelPackage}.${modelName};\n#end\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.io.Serializable;\nimport java.util.List;\n#if($config.qualifiedName)\nimport ${config.qualifiedName};\n#end\n#if($config.swagger)\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport io.swagger.annotations.ApiImplicitParams;\nimport io.swagger.annotations.ApiImplicitParam;\n#end\n#if($config.swagger3)\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport io.swagger.v3.oas.annotations.Parameters;\nimport io.swagger.v3.oas.annotations.tags.Tag;\n#end\n/**\n * $!table.comment 控制层。\n *\n * @author $author\n * @since  $since\n */\n@RestController\n@RequestMapping(\"/$requestPath\")\n#if($config.swagger)\n@Api(tags = \"$!table.comment\")\n#end\n#if($config.swagger3)\n@Tag(name = \"$!{table.comment}控制层\")\n#end\npublic class ${controllerName}{\n\n    @Resource\n    private ${interfaceName} ${interfaceVariable};\n\n/**\n * 添加 $!table.comment\n *\n * @param $requestPath $!table.comment\n * @return {@code true} 添加成功，{@code false} 添加失败\n */\n    @PostMapping(\"/save\")\n    #if($config.swagger)\n    @ApiOperation(value = \"添加$!table.comment\", notes = \"添加$!table.comment\")\n    @ApiImplicitParams(value = {\n        #foreach($column in $table.columnList)\n                @ApiImplicitParam(name = \"$column.fieldName\", value = \"$!column.comment\" #if($column.notNull), required = $column.notNull #end) #if($foreach.hasNext),\n        #end\n        #end\n    })\n    #end\n    #if($config.swagger3)\n    @Operation(summary = \"添加$!table.comment\")\n    @Parameters(value = {\n        #foreach($column in $table.columnList)\n                @Parameter(name = \"$column.fieldName\", description = \"$!column.comment\" #if($column.notNull), required = $column.notNull #end) #if($foreach.hasNext),\n        #end\n        #end\n    })\n    #end\n#if($config.qualifiedName)\n    public ${resutlClass} #if($config.genericity)<Boolean> #end save(@RequestBody $modelName  $requestPath){\n#if($config.resultType=='static')\n        return ${resutlClass}.${config.methodName}(${interfaceVariable}.save($requestPath));\n#else\n        return new ${resutlClass}(${interfaceVariable}.save($requestPath));\n#end\n        }\n#else\n    public boolean save(@RequestBody $modelName  $requestPath){\n        return ${interfaceVariable}.save($requestPath);\n    }\n#end\n\n\n/**\n * 根据主键删除$!table.comment\n *\n * @param id 主键\n * @return {@code true} 删除成功，{@code false} 删除失败\n */\n    @DeleteMapping(\"/remove/{id}\")\n    #if($config.swagger)\n    @ApiOperation(value = \"根据主键删除$!table.comment\", notes = \"根据主键删除$!table.comment\")\n    @ApiImplicitParams(value = {\n        #foreach($column in $table.columnList)\n            #if($column.primaryKey)\n                    @ApiImplicitParam(name = \"$column.fieldName\", value = \"$!column.comment\", required = true)\n            #end\n        #end\n    })\n    #end\n    #if($config.swagger3)\n    @Operation(summary = \"根据主键删除$!table.comment\")\n    @Parameters(value = {\n        #foreach($column in $table.columnList)\n            #if($column.primaryKey)\n                    @Parameter(name = \"$column.fieldName\", description = \"$!column.comment\", required = true)\n            #end\n        #end\n    })\n    #end\n#if($config.qualifiedName)\n    public ${resutlClass} #if($config.genericity)<Boolean> #end  remove(@PathVariable Serializable id){\n    #if($config.resultType=='static')\n            return ${resutlClass}.${config.methodName}(${interfaceVariable}.removeById(id));\n    #else\n            return new ${resutlClass}(${interfaceVariable}.removeById(id));\n    #end\n    }\n#else\n    public boolean remove(@PathVariable Serializable id){\n        return ${interfaceVariable}.removeById(id);\n    }\n#end\n\n\n/**\n * 根据主键更新$!table.comment\n *\n * @param $requestPath $!table.comment\n * @return {@code true} 更新成功，{@code false} 更新失败\n */\n    @PutMapping(\"/update\")\n    #if($config.swagger)\n    @ApiOperation(value = \"根据主键更新$!table.comment\", notes = \"根据主键更新$!table.comment\")\n    @ApiImplicitParams(value = {\n        #foreach($column in $table.columnList)\n                @ApiImplicitParam(name = \"$column.fieldName\", value = \"$!column.comment\" #if($column.primaryKey), required = true #end) #if($foreach.hasNext),\n        #end\n        #end\n    })\n    #end\n    #if($config.swagger3)\n    @Operation(summary = \"根据主键更新$!table.comment\")\n    @Parameters(value = {\n        #foreach($column in $table.columnList)\n                @Parameter(name = \"$column.fieldName\", description = \"$!column.comment\" #if($column.primaryKey), required = true #end) #if($foreach.hasNext),\n        #end\n        #end\n    })\n    #end\n#if($config.qualifiedName)\n    public  ${resutlClass} #if($config.genericity)<Boolean> #end  update(@RequestBody $modelName $requestPath ){\n    #if($config.resultType=='static')\n            return ${resutlClass}.${config.methodName}(${interfaceVariable}.updateById($requestPath));\n    #else\n            return new ${resutlClass}(${interfaceVariable}.updateById($requestPath));\n    #end\n    }\n#else\n    public boolean update(@RequestBody $modelName $requestPath ){\n        return ${interfaceVariable}.updateById($requestPath);\n    }\n#end\n\n\n/**\n * 查询所有$!table.comment\n *\n * @return 所有数据\n */\n    @GetMapping(\"/list\")\n    #if($config.swagger)\n    @ApiOperation(value = \"查询所有$!table.comment\", notes = \"查询所有$!table.comment\")\n    #end\n    #if($config.swagger3)\n    @Operation(summary = \"查询所有$!table.comment\")\n    #end\n#if($config.qualifiedName)\n    public ${resutlClass}#if($config.genericity)<List<$modelName>> #end list(){\n    #if($config.resultType=='static')\n            return ${resutlClass}.${config.methodName}(${interfaceVariable}.list());\n    #else\n            return new ${resutlClass}(${interfaceVariable}.list());\n    #end\n    }\n#else\n    public List<$modelName> list(){\n        return ${interfaceVariable}.list();\n    }\n#end\n\n\n/**\n * 根据$!{table.comment}主键获取详细信息。\n *\n * @param id ${requestPath}主键\n * @return $!{table.comment}详情\n */\n    @GetMapping(\"/getInfo/{id}\")\n    #if($config.swagger)\n    @ApiOperation(value = \"根据$!{table.comment}主键获取详细信息\", notes = \"根据$!{table.comment}主键获取详细信息\")\n    @ApiImplicitParams(value = {\n        #foreach($column in $table.columnList)\n            #if($column.primaryKey)\n                    @ApiImplicitParam(name = \"$column.fieldName\", value = \"$!column.comment\", required = true)\n            #end\n        #end\n    })\n    #end\n    #if($config.swagger3)\n    @Operation(summary = \"根据$!{table.comment}主键获取详细信息\")\n    @Parameters(value = {\n        #foreach($column in $table.columnList)\n            #if($column.primaryKey)\n                    @Parameter(name = \"$column.fieldName\", description = \"$!column.comment\", required = true)\n            #end\n        #end\n    })\n    #end\n#if($config.qualifiedName)\n    public ${resutlClass}#if($config.genericity)<$modelName> #end  getInfo(@PathVariable Serializable id){\n    #if($config.resultType=='static')\n            return ${resutlClass}.${config.methodName}(${interfaceVariable}.getById(id));\n    #else\n            return new ${resutlClass}(${interfaceVariable}.getById(id));\n    #end\n    }\n#else\n    public $modelName getInfo(@PathVariable Serializable id){\n        return ${interfaceVariable}.getById(id);\n    }\n#end\n\n\n/**\n * 分页查询$!{table.comment}\n *\n * @param page 分页对象\n * @return 分页对象\n */\n    @GetMapping(\"/page\")\n    #if($config.swagger)\n    @ApiOperation(value = \"分页查询$!{table.comment}\", notes = \"分页查询$!{table.comment}\")\n    @ApiImplicitParams(value = {\n            @ApiImplicitParam(name = \"pageNumber\", value = \"页码\", required = true),\n            @ApiImplicitParam(name = \"pageSize\", value = \"每页大小\", required = true)\n    })\n    #end\n    #if($config.swagger3)\n    @Operation(summary = \"分页查询$!table.comment\")\n    @Parameters(value = {\n            @Parameter(name = \"pageNumber\", description = \"页码\", required = true),\n            @Parameter(name = \"pageSize\", description = \"每页大小\", required = true)\n    })\n    #end\n#if($config.qualifiedName)\n    public ${resutlClass}#if($config.genericity)<Page<$modelName>> #end page(Page<$modelName> page){\n    #if($config.resultType=='static')\n            return ${resutlClass}.${config.methodName}(${interfaceVariable}.page(page));\n    #else\n            return new ${resutlClass}(${interfaceVariable}.page(page));\n    #end\n    }\n#else\n    public Page<$modelName> page(Page<$modelName> page){\n        return ${interfaceVariable}.page(page);\n    }\n#end\n}","data":true,"domainPath":"domain","genericity":true,"idType":"Auto","implModule":"DormitoryManagementSystem","implPackage":"com.yu.service.impl","implPath":"impl","implSuffix":"ServiceImpl","implTemplate":"\npackage $config.implPackage;\n\n\nimport org.springframework.stereotype.Service;\n#if($config.interfacePackage.length() > 0)\nimport ${config.interfacePackage}.${interfaceName};\n#end\n#if($config.modelPackage.length() > 0)\nimport ${config.modelPackage}.${modelName};\n#end\n#if($config.mapperPackage.length() > 0)\nimport $config.mapperPackage.${mapperName};\n#end\n#if($config.cache)\nimport com.mybatisflex.core.paginate.Page;\nimport com.mybatisflex.core.query.QueryWrapper;\nimport org.springframework.cache.annotation.Cacheable;\nimport org.springframework.cache.annotation.CacheConfig;\nimport org.springframework.cache.annotation.CacheEvict;\nimport java.io.Serializable;\nimport java.util.Collection;\nimport java.util.List;\n#end\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\n/**\n * $!table.comment 服务层实现。\n *\n * @author $author\n * @since $since\n */\n@Service\npublic class ${implName} extends ServiceImpl<${mapperName},${modelName}> implements ${interfaceName} {\n\n#if($config.cache)\n\t@Override\n\t@CacheEvict(allEntries = true)\n\tpublic boolean remove(QueryWrapper query) {\n\t\treturn super.remove(query);\n\t}\n\n\t@Override\n\t@CacheEvict(key = \"#id\")\n\tpublic boolean removeById(Serializable id) {\n\t\treturn super.removeById(id);\n\t}\n\n\t@Override\n\t@CacheEvict(allEntries = true)\n\tpublic boolean removeByIds(Collection<? extends Serializable> ids) {\n\t\treturn super.removeByIds(ids);\n\t}\n\n\t@Override\n\t@CacheEvict(allEntries = true)\n\tpublic boolean update($modelName entity, QueryWrapper query) {\n\t\treturn super.update(entity, query);\n\t}\n\n\t@Override\n\t@CacheEvict(key = \"#entity.#(primaryKey)\")\n\tpublic boolean updateById($modelName entity, boolean ignoreNulls) {\n\t\treturn super.updateById(entity, ignoreNulls);\n\t}\n\n\t@Override\n\t@CacheEvict(allEntries = true)\n\tpublic boolean updateBatch(Collection<$modelName> entities, int batchSize) {\n\t\treturn super.updateBatch(entities, batchSize);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#id\")\n\tpublic $modelName getById(Serializable id) {\n\t\treturn super.getById(id);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#root.methodName + ':' + #query.toSQL()\")\n\tpublic $modelName getOne(QueryWrapper query) {\n\t\treturn super.getOne(query);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#root.methodName + ':' + #query.toSQL()\")\n\tpublic <R> R getOneAs(QueryWrapper query, Class<R> asType) {\n\t\treturn super.getOneAs(query, asType);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#root.methodName + ':' + #query.toSQL()\")\n\tpublic List<$modelName> list(QueryWrapper query) {\n\t\treturn super.list(query);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#root.methodName + ':' + #query.toSQL()\")\n\tpublic <R> List<R> listAs(QueryWrapper query, Class<R> asType) {\n\t\treturn super.listAs(query, asType);\n\t}\n\n\t/**\n\t * @deprecated 无法通过注解进行缓存操作。\n\t */\n\t@Override\n\t@Deprecated\n\tpublic List<$modelName> listByIds(Collection<? extends Serializable> ids) {\n\t\treturn super.listByIds(ids);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#root.methodName + ':' + #query.toSQL()\")\n\tpublic long count(QueryWrapper query) {\n\t\treturn super.count(query);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#root.methodName + ':' + #page.getPageSize() + ':' + #page.getPageNumber() + ':' + #query.toSQL()\")\n\tpublic <R> Page<R> pageAs(Page<R> page, QueryWrapper query, Class<R> asType) {\n\t\treturn super.pageAs(page, query, asType);\n\t}\n#end\n}","interfaceModule":"DormitoryManagementSystem","interfacePackage":"com.yu.service","interfaceSuffix":"Service","interfaceTempalate":"package $interfacePackage;\n\n\n#if($config.modelPackage.length() > 0)\nimport ${config.modelPackage}.${modelName};\n#end\nimport com.baomidou.mybatisplus.extension.service.IService;\n\n/**\n * $!table.comment 服务层。\n *\n * @author $author\n * @since $since\n */\npublic interface ${interfaceName} extends IService<${modelName}>{\n\n}","logicDeleteField":"deleted","mapperModule":"DormitoryManagementSystem","mapperPackage":"com.yu.mapper","mapperPath":"mapper","mapperSuffix":"Mapper","mapperTemplate":"package $config.mapperPackage;\n\n#if($config.modelPackage.length() > 0)\nimport ${config.modelPackage}.${modelName};\n#end\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport org.apache.ibatis.annotations.Mapper;\n\n/**\n * $!table.comment 映射层。\n *\n * @author $author\n * @since $since\n */\n@Mapper\npublic interface ${mapperName} extends BaseMapper<${modelName}> {\n\n\n}\n","methodName":"success(T data)","modelModule":"DormitoryManagementSystem","modelPackage":"com.yu.model.entity","modelSuffix":"Entity","modelSuperClass":"","modelTemplate":"package $config.modelPackage;\n\n#if($config.data||$config.activeRecord)\nimport lombok.Data;\n#end\n#if($config.allArgsConstructor)\nimport lombok.AllArgsConstructor;\n#end\n#if($config.noArgsConstructor)\nimport lombok.NoArgsConstructor;\n#end\n#if($config.requiredArgsConstructor)\nimport lombok.RequiredArgsConstructor;\n#end\n#if($config.builder)\nimport lombok.Builder;\n#end\n#if($config.accessors)\nimport lombok.experimental.Accessors;\n#end\n#if($config.swagger)\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n#end\n#if($config.swagger3)\nimport io.swagger.v3.oas.annotations.media.Schema;\n#end\n#if($config.activeRecord)\nimport com.mybatisflex.core.activerecord.Model;\n#end\nimport com.baomidou.mybatisplus.annotation.TableField;\n#foreach($column in $table.columnList)\n#if($column.primaryKey)\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.IdType;\n#end\n#end\nimport com.baomidou.mybatisplus.annotation.TableName;\n#foreach($classImport in $importClassList)\nimport $classImport;\n#end\n\n/**\n * $!table.comment 实体类。\n *\n * @author $author\n * @since $since\n */\n#if($config.accessors)\n@Accessors(chain = true)\n#end\n#if($config.requiredArgsConstructor)\n@RequiredArgsConstructor\n#end\n#if($config.data||$config.activeRecord)\n@Data#if($config.activeRecord)(staticConstructor = \"create\") #end\n#end\n#if($config.builder)\n@Builder\n#end\n#if($config.noArgsConstructor)\n@NoArgsConstructor\n#end\n#if($config.allArgsConstructor)\n@AllArgsConstructor\n#end\n#if($config.swagger)\n@ApiModel(value = \"$!table.comment\", description = \"$!table.comment\")\n#end\n#if($config.swagger3)\n@Schema(name = \"$table.comment\")\n#end\n@TableName(value = \"$table.name\"#if($config.dataSource) , dataSource = \"${config.dataSource}\" #end#if($table.onInsert) , onInsert = ${table.onInsert}.class #end#if($table.onUpdate) , onUpdate = ${table.onUpdate}.class #end#if($table.onSet) , onSet = ${table.onSet}.class #end)\npublic class ${modelName} #if($config.activeRecord) extends Model<${modelName}>  #end #if(${config.modelSuperClass}) extends ${table.superClass}  #end {\n\n    #foreach($column in $table.columnList)\n    #if($column.comment.length()>0)\n    /**\n    * $!column.comment\n    */\n    #end\n    #if($config.swagger && $column.comment)\n    @ApiModelProperty(value = \"$column.comment\")\n    #end\n    #if($config.swagger3 && $column.comment)\n    @Schema(description = \"$column.comment\")\n    #end\n    #if($column.primaryKey)\n    @TableId(type = IdType.AUTO)\n    #else\n    @TableField(value = \"$column.name\" #if($column.logicDelete), isLogicDelete = true #end #if($column.tenant), tenantId = true #end #if($column.version), version = true #end #if($column.insertValue), onInsertValue = \"$column.insertValue\" #end#if($column.updateValue), onUpdateValue = \"$column.updateValue\" #end)\n    #end\n    private $column.fieldType  $column.fieldName;\n\n#end\n\n#if($config.data==false&& $config.activeRecord==false)\n    #foreach($column in $table.columnList)\n    public  $column.fieldType  get${column.methodName}() {\n        return ${column.fieldName};\n    }\n\n    public void set${column.methodName}(${column.fieldType} ${column.fieldName}) {\n        this.${column.fieldName} = ${column.fieldName};\n    }\n#end\n#end\n        }\n","modules":{"":"DormitoryManagementSystem","Entity":"DormitoryManagementSystem","Mapper":"DormitoryManagementSystem","ServiceImpl":"DormitoryManagementSystem","Service":"DormitoryManagementSystem","Controller":"DormitoryManagementSystem"},"noArgsConstructor":true,"onInsert":"","onUpdate":"","overrideCheckBox":true,"packages":{"":"mapper","Entity":"com.yu.model.entity","Mapper":"com.yu.mapper","ServiceImpl":"com.yu.service.impl","Service":"com.yu.service","Controller":"com.yu.controller"},"qualifiedName":"com.yu.common.result.Result","requiredArgsConstructor":false,"resultType":"static","servicePath":"service","since":"1.0","suffix":{"":"Mapper","Entity":"Entity","Mapper":"Mapper","ServiceImpl":"ServiceImpl","Service":"Service","Controller":"Controller"},"swagger":false,"swagger3":true,"sync":false,"tablePrefix":"","templates":{"":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"${config.mapperPackage}.${mapperName}\">\n#if($config.modelPackage.length() > 0)\n    <resultMap id=\"BaseResultMap\" type=\"${config.modelPackage}.${modelName}\">\n#set($result = \"\")\n#foreach($column in $table.columnList)\n#set($result = $result + \"`\"+ ${column.name}+ \"`\")\n#if($foreach.hasNext())\n#set($result = $result + \", \")\n#end\n#if($column.primaryKey)\n        <id column=\"${column.name}\" jdbcType=\"$column.type\" property=\"${column.fieldName}\"/>\n#else\n        <result column=\"${column.name}\" jdbcType=\"$column.type\" property=\"${column.fieldName}\"/>\n#end\n#end\n    </resultMap>\n#end\n    <sql id=\"Base_Column_List\">\n        $result\n    </sql>\n\n</mapper>","Entity":"package $config.modelPackage;\n\n#if($config.data||$config.activeRecord)\nimport lombok.Data;\n#end\n#if($config.allArgsConstructor)\nimport lombok.AllArgsConstructor;\n#end\n#if($config.noArgsConstructor)\nimport lombok.NoArgsConstructor;\n#end\n#if($config.requiredArgsConstructor)\nimport lombok.RequiredArgsConstructor;\n#end\n#if($config.builder)\nimport lombok.Builder;\n#end\n#if($config.accessors)\nimport lombok.experimental.Accessors;\n#end\n#if($config.swagger)\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n#end\n#if($config.swagger3)\nimport io.swagger.v3.oas.annotations.media.Schema;\n#end\n#if($config.activeRecord)\nimport com.mybatisflex.core.activerecord.Model;\n#end\nimport com.baomidou.mybatisplus.annotation.TableField;\n#foreach($column in $table.columnList)\n#if($column.primaryKey)\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.IdType;\n#end\n#end\nimport com.baomidou.mybatisplus.annotation.TableName;\n#foreach($classImport in $importClassList)\nimport $classImport;\n#end\n\n/**\n * $!table.comment 实体类。\n *\n * @author $author\n * @since $since\n */\n#if($config.accessors)\n@Accessors(chain = true)\n#end\n#if($config.requiredArgsConstructor)\n@RequiredArgsConstructor\n#end\n#if($config.data||$config.activeRecord)\n@Data#if($config.activeRecord)(staticConstructor = \"create\") #end\n#end\n#if($config.builder)\n@Builder\n#end\n#if($config.noArgsConstructor)\n@NoArgsConstructor\n#end\n#if($config.allArgsConstructor)\n@AllArgsConstructor\n#end\n#if($config.swagger)\n@ApiModel(value = \"$!table.comment\", description = \"$!table.comment\")\n#end\n#if($config.swagger3)\n@Schema(name = \"$table.comment\")\n#end\n@TableName(value = \"$table.name\"#if($config.dataSource) , dataSource = \"${config.dataSource}\" #end#if($table.onInsert) , onInsert = ${table.onInsert}.class #end#if($table.onUpdate) , onUpdate = ${table.onUpdate}.class #end#if($table.onSet) , onSet = ${table.onSet}.class #end)\npublic class ${modelName} #if($config.activeRecord) extends Model<${modelName}>  #end #if(${config.modelSuperClass}) extends ${table.superClass}  #end {\n\n    #foreach($column in $table.columnList)\n    #if($column.comment.length()>0)\n    /**\n    * $!column.comment\n    */\n    #end\n    #if($config.swagger && $column.comment)\n    @ApiModelProperty(value = \"$column.comment\")\n    #end\n    #if($config.swagger3 && $column.comment)\n    @Schema(description = \"$column.comment\")\n    #end\n    #if($column.primaryKey)\n    @TableId(type = IdType.AUTO)\n    #else\n    @TableField(value = \"$column.name\" #if($column.logicDelete), isLogicDelete = true #end #if($column.tenant), tenantId = true #end #if($column.version), version = true #end #if($column.insertValue), onInsertValue = \"$column.insertValue\" #end#if($column.updateValue), onUpdateValue = \"$column.updateValue\" #end)\n    #end\n    private $column.fieldType  $column.fieldName;\n\n#end\n\n#if($config.data==false&& $config.activeRecord==false)\n    #foreach($column in $table.columnList)\n    public  $column.fieldType  get${column.methodName}() {\n        return ${column.fieldName};\n    }\n\n    public void set${column.methodName}(${column.fieldType} ${column.fieldName}) {\n        this.${column.fieldName} = ${column.fieldName};\n    }\n#end\n#end\n        }\n","Mapper":"package $config.mapperPackage;\n\n#if($config.modelPackage.length() > 0)\nimport ${config.modelPackage}.${modelName};\n#end\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport org.apache.ibatis.annotations.Mapper;\n\n/**\n * $!table.comment 映射层。\n *\n * @author $author\n * @since $since\n */\n@Mapper\npublic interface ${mapperName} extends BaseMapper<${modelName}> {\n\n\n}\n","ServiceImpl":"\npackage $config.implPackage;\n\n\nimport org.springframework.stereotype.Service;\n#if($config.interfacePackage.length() > 0)\nimport ${config.interfacePackage}.${interfaceName};\n#end\n#if($config.modelPackage.length() > 0)\nimport ${config.modelPackage}.${modelName};\n#end\n#if($config.mapperPackage.length() > 0)\nimport $config.mapperPackage.${mapperName};\n#end\n#if($config.cache)\nimport com.mybatisflex.core.paginate.Page;\nimport com.mybatisflex.core.query.QueryWrapper;\nimport org.springframework.cache.annotation.Cacheable;\nimport org.springframework.cache.annotation.CacheConfig;\nimport org.springframework.cache.annotation.CacheEvict;\nimport java.io.Serializable;\nimport java.util.Collection;\nimport java.util.List;\n#end\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\n/**\n * $!table.comment 服务层实现。\n *\n * @author $author\n * @since $since\n */\n@Service\npublic class ${implName} extends ServiceImpl<${mapperName},${modelName}> implements ${interfaceName} {\n\n#if($config.cache)\n\t@Override\n\t@CacheEvict(allEntries = true)\n\tpublic boolean remove(QueryWrapper query) {\n\t\treturn super.remove(query);\n\t}\n\n\t@Override\n\t@CacheEvict(key = \"#id\")\n\tpublic boolean removeById(Serializable id) {\n\t\treturn super.removeById(id);\n\t}\n\n\t@Override\n\t@CacheEvict(allEntries = true)\n\tpublic boolean removeByIds(Collection<? extends Serializable> ids) {\n\t\treturn super.removeByIds(ids);\n\t}\n\n\t@Override\n\t@CacheEvict(allEntries = true)\n\tpublic boolean update($modelName entity, QueryWrapper query) {\n\t\treturn super.update(entity, query);\n\t}\n\n\t@Override\n\t@CacheEvict(key = \"#entity.#(primaryKey)\")\n\tpublic boolean updateById($modelName entity, boolean ignoreNulls) {\n\t\treturn super.updateById(entity, ignoreNulls);\n\t}\n\n\t@Override\n\t@CacheEvict(allEntries = true)\n\tpublic boolean updateBatch(Collection<$modelName> entities, int batchSize) {\n\t\treturn super.updateBatch(entities, batchSize);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#id\")\n\tpublic $modelName getById(Serializable id) {\n\t\treturn super.getById(id);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#root.methodName + ':' + #query.toSQL()\")\n\tpublic $modelName getOne(QueryWrapper query) {\n\t\treturn super.getOne(query);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#root.methodName + ':' + #query.toSQL()\")\n\tpublic <R> R getOneAs(QueryWrapper query, Class<R> asType) {\n\t\treturn super.getOneAs(query, asType);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#root.methodName + ':' + #query.toSQL()\")\n\tpublic List<$modelName> list(QueryWrapper query) {\n\t\treturn super.list(query);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#root.methodName + ':' + #query.toSQL()\")\n\tpublic <R> List<R> listAs(QueryWrapper query, Class<R> asType) {\n\t\treturn super.listAs(query, asType);\n\t}\n\n\t/**\n\t * @deprecated 无法通过注解进行缓存操作。\n\t */\n\t@Override\n\t@Deprecated\n\tpublic List<$modelName> listByIds(Collection<? extends Serializable> ids) {\n\t\treturn super.listByIds(ids);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#root.methodName + ':' + #query.toSQL()\")\n\tpublic long count(QueryWrapper query) {\n\t\treturn super.count(query);\n\t}\n\n\t@Override\n\t@Cacheable(key = \"#root.methodName + ':' + #page.getPageSize() + ':' + #page.getPageNumber() + ':' + #query.toSQL()\")\n\tpublic <R> Page<R> pageAs(Page<R> page, QueryWrapper query, Class<R> asType) {\n\t\treturn super.pageAs(page, query, asType);\n\t}\n#end\n}","Service":"package $interfacePackage;\n\n\n#if($config.modelPackage.length() > 0)\nimport ${config.modelPackage}.${modelName};\n#end\nimport com.baomidou.mybatisplus.extension.service.IService;\n\n/**\n * $!table.comment 服务层。\n *\n * @author $author\n * @since $since\n */\npublic interface ${interfaceName} extends IService<${modelName}>{\n\n}","Controller":"package $config.controllerPackage;\n\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport jakarta.annotation.Resource;\n#if($config.interfacePackage.length() > 0)\nimport ${config.interfacePackage}.${interfaceName};\n#end\n#if($config.modelPackage.length() > 0)\nimport ${config.modelPackage}.${modelName};\n#end\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.io.Serializable;\nimport java.util.List;\n#if($config.qualifiedName)\nimport ${config.qualifiedName};\n#end\n#if($config.swagger)\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport io.swagger.annotations.ApiImplicitParams;\nimport io.swagger.annotations.ApiImplicitParam;\n#end\n#if($config.swagger3)\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport io.swagger.v3.oas.annotations.Parameters;\nimport io.swagger.v3.oas.annotations.tags.Tag;\n#end\n/**\n * $!table.comment 控制层。\n *\n * @author $author\n * @since  $since\n */\n@RestController\n@RequestMapping(\"/$requestPath\")\n#if($config.swagger)\n@Api(tags = \"$!table.comment\")\n#end\n#if($config.swagger3)\n@Tag(name = \"$!{table.comment}控制层\")\n#end\npublic class ${controllerName}{\n\n    @Resource\n    private ${interfaceName} ${interfaceVariable};\n\n/**\n * 添加 $!table.comment\n *\n * @param $requestPath $!table.comment\n * @return {@code true} 添加成功，{@code false} 添加失败\n */\n    @PostMapping(\"/save\")\n    #if($config.swagger)\n    @ApiOperation(value = \"添加$!table.comment\", notes = \"添加$!table.comment\")\n    @ApiImplicitParams(value = {\n        #foreach($column in $table.columnList)\n                @ApiImplicitParam(name = \"$column.fieldName\", value = \"$!column.comment\" #if($column.notNull), required = $column.notNull #end) #if($foreach.hasNext),\n        #end\n        #end\n    })\n    #end\n    #if($config.swagger3)\n    @Operation(summary = \"添加$!table.comment\")\n    @Parameters(value = {\n        #foreach($column in $table.columnList)\n                @Parameter(name = \"$column.fieldName\", description = \"$!column.comment\" #if($column.notNull), required = $column.notNull #end) #if($foreach.hasNext),\n        #end\n        #end\n    })\n    #end\n#if($config.qualifiedName)\n    public ${resutlClass} #if($config.genericity)<Boolean> #end save(@RequestBody $modelName  $requestPath){\n#if($config.resultType=='static')\n        return ${resutlClass}.${config.methodName}(${interfaceVariable}.save($requestPath));\n#else\n        return new ${resutlClass}(${interfaceVariable}.save($requestPath));\n#end\n        }\n#else\n    public boolean save(@RequestBody $modelName  $requestPath){\n        return ${interfaceVariable}.save($requestPath);\n    }\n#end\n\n\n/**\n * 根据主键删除$!table.comment\n *\n * @param id 主键\n * @return {@code true} 删除成功，{@code false} 删除失败\n */\n    @DeleteMapping(\"/remove/{id}\")\n    #if($config.swagger)\n    @ApiOperation(value = \"根据主键删除$!table.comment\", notes = \"根据主键删除$!table.comment\")\n    @ApiImplicitParams(value = {\n        #foreach($column in $table.columnList)\n            #if($column.primaryKey)\n                    @ApiImplicitParam(name = \"$column.fieldName\", value = \"$!column.comment\", required = true)\n            #end\n        #end\n    })\n    #end\n    #if($config.swagger3)\n    @Operation(summary = \"根据主键删除$!table.comment\")\n    @Parameters(value = {\n        #foreach($column in $table.columnList)\n            #if($column.primaryKey)\n                    @Parameter(name = \"$column.fieldName\", description = \"$!column.comment\", required = true)\n            #end\n        #end\n    })\n    #end\n#if($config.qualifiedName)\n    public ${resutlClass} #if($config.genericity)<Boolean> #end  remove(@PathVariable Serializable id){\n    #if($config.resultType=='static')\n            return ${resutlClass}.${config.methodName}(${interfaceVariable}.removeById(id));\n    #else\n            return new ${resutlClass}(${interfaceVariable}.removeById(id));\n    #end\n    }\n#else\n    public boolean remove(@PathVariable Serializable id){\n        return ${interfaceVariable}.removeById(id);\n    }\n#end\n\n\n/**\n * 根据主键更新$!table.comment\n *\n * @param $requestPath $!table.comment\n * @return {@code true} 更新成功，{@code false} 更新失败\n */\n    @PutMapping(\"/update\")\n    #if($config.swagger)\n    @ApiOperation(value = \"根据主键更新$!table.comment\", notes = \"根据主键更新$!table.comment\")\n    @ApiImplicitParams(value = {\n        #foreach($column in $table.columnList)\n                @ApiImplicitParam(name = \"$column.fieldName\", value = \"$!column.comment\" #if($column.primaryKey), required = true #end) #if($foreach.hasNext),\n        #end\n        #end\n    })\n    #end\n    #if($config.swagger3)\n    @Operation(summary = \"根据主键更新$!table.comment\")\n    @Parameters(value = {\n        #foreach($column in $table.columnList)\n                @Parameter(name = \"$column.fieldName\", description = \"$!column.comment\" #if($column.primaryKey), required = true #end) #if($foreach.hasNext),\n        #end\n        #end\n    })\n    #end\n#if($config.qualifiedName)\n    public  ${resutlClass} #if($config.genericity)<Boolean> #end  update(@RequestBody $modelName $requestPath ){\n    #if($config.resultType=='static')\n            return ${resutlClass}.${config.methodName}(${interfaceVariable}.updateById($requestPath));\n    #else\n            return new ${resutlClass}(${interfaceVariable}.updateById($requestPath));\n    #end\n    }\n#else\n    public boolean update(@RequestBody $modelName $requestPath ){\n        return ${interfaceVariable}.updateById($requestPath);\n    }\n#end\n\n\n/**\n * 查询所有$!table.comment\n *\n * @return 所有数据\n */\n    @GetMapping(\"/list\")\n    #if($config.swagger)\n    @ApiOperation(value = \"查询所有$!table.comment\", notes = \"查询所有$!table.comment\")\n    #end\n    #if($config.swagger3)\n    @Operation(summary = \"查询所有$!table.comment\")\n    #end\n#if($config.qualifiedName)\n    public ${resutlClass}#if($config.genericity)<List<$modelName>> #end list(){\n    #if($config.resultType=='static')\n            return ${resutlClass}.${config.methodName}(${interfaceVariable}.list());\n    #else\n            return new ${resutlClass}(${interfaceVariable}.list());\n    #end\n    }\n#else\n    public List<$modelName> list(){\n        return ${interfaceVariable}.list();\n    }\n#end\n\n\n/**\n * 根据$!{table.comment}主键获取详细信息。\n *\n * @param id ${requestPath}主键\n * @return $!{table.comment}详情\n */\n    @GetMapping(\"/getInfo/{id}\")\n    #if($config.swagger)\n    @ApiOperation(value = \"根据$!{table.comment}主键获取详细信息\", notes = \"根据$!{table.comment}主键获取详细信息\")\n    @ApiImplicitParams(value = {\n        #foreach($column in $table.columnList)\n            #if($column.primaryKey)\n                    @ApiImplicitParam(name = \"$column.fieldName\", value = \"$!column.comment\", required = true)\n            #end\n        #end\n    })\n    #end\n    #if($config.swagger3)\n    @Operation(summary = \"根据$!{table.comment}主键获取详细信息\")\n    @Parameters(value = {\n        #foreach($column in $table.columnList)\n            #if($column.primaryKey)\n                    @Parameter(name = \"$column.fieldName\", description = \"$!column.comment\", required = true)\n            #end\n        #end\n    })\n    #end\n#if($config.qualifiedName)\n    public ${resutlClass}#if($config.genericity)<$modelName> #end  getInfo(@PathVariable Serializable id){\n    #if($config.resultType=='static')\n            return ${resutlClass}.${config.methodName}(${interfaceVariable}.getById(id));\n    #else\n            return new ${resutlClass}(${interfaceVariable}.getById(id));\n    #end\n    }\n#else\n    public $modelName getInfo(@PathVariable Serializable id){\n        return ${interfaceVariable}.getById(id);\n    }\n#end\n\n\n/**\n * 分页查询$!{table.comment}\n *\n * @param page 分页对象\n * @return 分页对象\n */\n    @GetMapping(\"/page\")\n    #if($config.swagger)\n    @ApiOperation(value = \"分页查询$!{table.comment}\", notes = \"分页查询$!{table.comment}\")\n    @ApiImplicitParams(value = {\n            @ApiImplicitParam(name = \"pageNumber\", value = \"页码\", required = true),\n            @ApiImplicitParam(name = \"pageSize\", value = \"每页大小\", required = true)\n    })\n    #end\n    #if($config.swagger3)\n    @Operation(summary = \"分页查询$!table.comment\")\n    @Parameters(value = {\n            @Parameter(name = \"pageNumber\", description = \"页码\", required = true),\n            @Parameter(name = \"pageSize\", description = \"每页大小\", required = true)\n    })\n    #end\n#if($config.qualifiedName)\n    public ${resutlClass}#if($config.genericity)<Page<$modelName>> #end page(Page<$modelName> page){\n    #if($config.resultType=='static')\n            return ${resutlClass}.${config.methodName}(${interfaceVariable}.page(page));\n    #else\n            return new ${resutlClass}(${interfaceVariable}.page(page));\n    #end\n    }\n#else\n    public Page<$modelName> page(Page<$modelName> page){\n        return ${interfaceVariable}.page(page);\n    }\n#end\n}"},"xmlModule":"DormitoryManagementSystem","xmlPackage":"mapper","xmlPath":"mappers","xmlTemplate":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"${config.mapperPackage}.${mapperName}\">\n#if($config.modelPackage.length() > 0)\n    <resultMap id=\"BaseResultMap\" type=\"${config.modelPackage}.${modelName}\">\n#set($result = \"\")\n#foreach($column in $table.columnList)\n#set($result = $result + \"`\"+ ${column.name}+ \"`\")\n#if($foreach.hasNext())\n#set($result = $result + \", \")\n#end\n#if($column.primaryKey)\n        <id column=\"${column.name}\" jdbcType=\"$column.type\" property=\"${column.fieldName}\"/>\n#else\n        <result column=\"${column.name}\" jdbcType=\"$column.type\" property=\"${column.fieldName}\"/>\n#end\n#end\n    </resultMap>\n#end\n    <sql id=\"Base_Column_List\">\n        $result\n    </sql>\n\n</mapper>"}}}